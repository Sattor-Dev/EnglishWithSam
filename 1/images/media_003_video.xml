<?xml version="1.0" encoding="utf-8"?>
<!--
'*	media_003_video.xml
'*	Copyright (c) Websoft, 2006.  All rights reserved.
-->
<params>
	<object>
		<label>Video</label>
		<width>320</width>
		<height>240</height>
		<description>Video. Any format supported by Windows Media Player, QuickTime Player or Real Player</description>
	</object>
	<page name="Parameters" w="240" h="160">
		<param type="edit" id="hidden.label.nosrc" text="" def="No video source" x="10" y="-50" w="1" h="1"/>
		<param type="label" text="Source" x="10" y="6" w="220" h="13"/>
		<param type="line" x="8" y="19" w="224" h="40"/>
		<param type="radio" id="vfile" text="File:" def="yes" x="20" y="25" w="40" h="13">
			<events>
				<event name="check" target="video_uri" action="enable"/>
				<event name="uncheck" target="video_uri" action="disable"/>
			</events>
		</param>
		<param type="radio" id="vURL" text="URL:" def="no" x="20" y="41" w="40" h="13">
			<events>
				<event name="check" target="video_url" action="enable"/>
				<event name="uncheck" target="video_url" action="disable"/>
			</events>
		</param>
		<param type="file" id="video_uri" text="" def="" x="60" y="25" w="140" h="13"/>
		<param type="edit" id="video_url" text="" def="" x="60" y="41" w="140" h="13"/>
		<param type="label" text="Player selection:" x="10" y="64" w="100" h="13"/>
		<param type="select" id="player" text="" def="" x="110" y="63" w="120" h="13">
			<items>
				<item id="auto" label="Automatic"/>
				<item id="wmp" label="Windows Media Player"/>
				<item id="qtp" label="Apple QuickTime Player"/>
				<item id="rp" label="RealPlayer"/>
			</items>
		</param>
		<param type="label" text="Player controls:" x="10" y="80" w="100" h="13"/>
		<param type="select" id="video_controls" text="" def="no" x="110" y="79" w="120" h="13">
			<items>
				<item id="no" label="Hide"/>
				<item id="mini" label="Minimal"/>
				<item id="full" label="Full"/>
			</items>
		</param>
		<param type="check" id="video_autostart" text="Movie autostart" def="yes" x="10" y="96" w="136" h="13"/>
		<param type="check" id="video_windowless" text="Windowless mode (WMP IE, FF, NS7)" def="no" x="10" y="112" w="166" h="13"/>
		<param type="check" id="video_invisible" text="Invisible mode" def="no" x="10" y="128" w="136" h="13"/>
	</page>
	<methods>
		<method name="Constructor" label="_Constructor" access="private">
			<params>
			</params>
			<body>
				<![CDATA[function Constructor(argobj)
			{
				if(argobj.pid==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				oCurObj.setAttribute("destructor","Destructor");
				if(g_aParams[argobj.pid]==null)
				{
					g_aParams[argobj.pid] = g_oParams.selectSingleNode("./param[@objectid='" + argobj.pid + "']");
					if(g_aParams[argobj.pid]==null) return false;
				}
				var bAutoStart = (g_aParams[argobj.pid].selectSingleNode("video_autostart").text=="yes");
				var sPlayer = g_aParams[argobj.pid].selectSingleNode("player").text;
				var sPath = (g_aParams[argobj.pid].selectSingleNode("vURL").text=="yes") ? g_aParams[argobj.pid].selectSingleNode("video_url").text : g_aParams[argobj.pid].selectSingleNode("video_uri").text;
				var sUIMode = g_aParams[argobj.pid].selectSingleNode("video_controls").text;
				if(sUIMode=="no") sUIMode = "none";
				if(g_aParams[argobj.pid].selectSingleNode("video_invisible").text=="yes") sUIMode = "invisible";
				var sExtension = sPath.substr( sPath.lastIndexOf(".") + 1 );
				var oExtInfo = CLM.GetMIME({ ext: sExtension, type: "video"  });
				if(CLM.Supports(oExtInfo))
				{
					var oPlayer = document.createElement("video");
					oPlayer.setAttribute("id", argobj.pid + "_VIDEO");
					oPlayer.setAttribute("objid", argobj.pid );
					oPlayer.setAttribute("src", sPath);
					oPlayer.setAttribute("width", parseInt(oCurObj.style.width));
					oPlayer.setAttribute("height", parseInt(oCurObj.style.height));
					oPlayer.setAttribute("oncanplay", 'CallMethod("media_003_video", "EventHandler", { pid: this.getAttribute("objid"), etype: "video_load" })');
					oPlayer.setAttribute("onplaying", 'CallMethod("media_003_video", "EventHandler", { pid: this.getAttribute("objid"), etype: "video_play" })');
					oPlayer.setAttribute("onpause", 'CallMethod("media_003_video", "EventHandler", { pid: this.getAttribute("objid"), etype: "video_pause" })');
					oPlayer.setAttribute("onerror", 'CallMethod("media_003_video", "EventHandler", { pid: this.getAttribute("objid"), etype: "video_error" })');
					oPlayer.setAttribute("onended", 'CallMethod("media_003_video", "EventHandler", { pid: this.getAttribute("objid"), etype: "video_end" })');
					oPlayer.setAttribute("ontimeupdate", 'CallMethod("media_003_video", "EventHandler", { pid: this.getAttribute("objid"), etype: "video_seek" })');
					if(sUIMode=="invisible") oPlayer.style.visibility = "hidden";
					if(sUIMode!="none") oPlayer.setAttribute("controls", "controls");
					if(bAutoStart) oPlayer.setAttribute("autoplay", "autoplay");
					oCurObj.innerHTML = "";
					oCurObj.appendChild(oPlayer);
					oCurObj.setAttribute("playerid", argobj.pid + "_VIDEO");
					oCurObj.setAttribute("playertype", "video");
					oCurObj.setAttribute("playstate", "0");
					oCurObj.setAttribute("playpos", "0");
				}
				else
				{
					if(sPlayer=="auto")
					{
						if(sPath.indexOf(".mov")!=-1 || sPath.indexOf(".3gp")!=-1)
						{
							sPlayer = "qtp";
						}
						else
						{
							if(sPath.indexOf(".rm")!=-1 || sPath.indexOf(".ram")!=-1 || sPath.indexOf(".rpm")!=-1)
							{
								sPlayer = "rp";
							}
							else
							{
								sPlayer = "wmp";
							}
						}
					}
					var sURL = document.location.href;
					var iPtr = sURL.indexOf("?");
					if(iPtr!=-1) sURL = sURL.substr(0,iPtr);
					iPtr = sURL.lastIndexOf("/");
					sURL = sURL.substr(0,iPtr+1);
					var bEmbed = false;
					var bFF = false;
					var oPlayer;
					var oParent;
					var sPlayerID;
					switch(sPlayer)
					{
						case "rp":
						{
							var sPlayerID = g_isMSIE ? argobj.pid + "_rmp_ie" : argobj.pid + "_rmp_w3c";
							oCurObj.setAttribute("playerid", sPlayerID);
							oCurObj.setAttribute("playertype", "rp");
							oCurObj.setAttribute("playstate", "0");
							oCurObj.setAttribute("playpos", "0");
							oCurObj.setAttribute("url", sURL + sPath);
							oCurObj.setAttribute("state", "playing");
							break;
						}
						case "qtp":
						{
							var oContainer = document.getElementById(argobj.pid + "_container");
							if(oContainer==null) return false;
							oPlayer = g_isMSIE ? document.getElementById(argobj.pid + "_qtp_w3c") : document.getElementById(argobj.pid + "_qtp_ie");
							oContainer.removeChild(oPlayer);
							sPlayerID = argobj.pid + "_qtp_" + (g_isMSIE ? "ie" : "w3c");
							oPlayer = document.getElementById(sPlayerID);
							oPlayer.width = oCurObj.offsetWidth;
							oPlayer.height = oCurObj.offsetHeight;
							oPlayer.style.visibility = "visible";
							oPlayer.setAttribute("objid", argobj.pid);
							if(g_isMSIE)
							{
								try
								{
									oPlayer.SetControllerVisible(sUIMode!="none");
								}
								catch(e)
								{}
							}
							else
							{
								oPlayer.addEventListener("qt_load", function () { CallMethod("media_003_video", "EventHandler", { pid: this.getAttribute("objid"), etype: 'qt_load' } );}, false);
								oPlayer.addEventListener("qt_ended", function () { CallMethod("media_003_video", "EventHandler", { pid: this.getAttribute("objid"), etype: 'qt_ended' } );}, false);
								oPlayer.addEventListener("qt_pause", function () { CallMethod("media_003_video", "EventHandler", { pid: this.getAttribute("objid"), etype: 'qt_pause' } );}, false);
								oPlayer.addEventListener("qt_play", function () { CallMethod("media_003_video", "EventHandler", { pid: this.getAttribute("objid"), etype: 'qt_play' } );}, false);
								oPlayer.addEventListener("qt_timechanged", function () { CallMethod("media_003_video", "EventHandler", { pid: this.getAttribute("objid"), etype: 'qt_timechanged' } );}, false);
							}
							oCurObj.setAttribute("playerid", sPlayerID);
							oCurObj.setAttribute("playertype", "qtp");
							oCurObj.setAttribute("playstate", "0");
							oCurObj.setAttribute("playpos", "0");
							oCurObj.setAttribute("url", sURL + sPath);
							if(bAutoStart)
							{
								FireEvent(argobj.pid,"onPlayStart");
								if(oCurObj==null) return false;
								FireEvent(argobj.pid,"onPlayBegin");
								if(oCurObj==null) return false;
							}
							oCurObj.setAttribute("pos", "0");
							CreateTimeActionMethod("media_003_video", "CheckState", null, 50, { pid: argobj.pid });
							break;
						}
						case "wmp":
						{
							var oContainer = document.getElementById(argobj.pid + "_container");
							if(oContainer==null) return false;
							oPlayer = g_isMSIE ? document.getElementById(argobj.pid + "_wmp_w3c") : document.getElementById(argobj.pid + "_wmp_ie");
							oContainer.removeChild(oPlayer);
							sPlayerID = argobj.pid + "_wmp_" + (g_isMSIE ? "ie" : "w3c");
							oPlayer = document.getElementById(sPlayerID);
							oPlayer.style.visibility = "visible";
							try
							{
								oPlayer.uiMode = sUIMode;
								oCurObj.setAttribute("playerid", sPlayerID);
								oCurObj.setAttribute("playertype", "wmp");
								oCurObj.setAttribute("playstate", "0");
								oCurObj.setAttribute("playpos", "0");
								if(g_isMSIE)
								{
									var sText = "<script language='JavaScript' for='" + sPlayerID + "' event='PlayStateChange(sState)'>CallMethod('media_003_video','EventHandler', { pid: '" + argobj.pid + "', etype: 'PlayStateChange', state: sState });</script>";
									sText += "<script language='JavaScript' for='" + sPlayerID + "' event='mediaError(pMediaObject)'>CallMethod('media_003_video','EventHandler', { pid: '" + argobj.pid + "', etype: 'mediaError' });</script>";
									sText += "<script language='JavaScript' for='" + sPlayerID + "' event='mediaChange(sItem)'>CallMethod('media_003_video','EventHandler', { pid: '" + argobj.pid + "', etype: 'mediaChange' });</script>";
									sText += "<script language='JavaScript' for='" + sPlayerID + "' event='positionChange(sOldPos,sNewPos)'>CallMethod('media_003_video','EventHandler', { pid: '" + argobj.pid + "', etype: 'positionChange' });</script>";
									oCurObj.innerHTML += sText;
								}
								CreateTimeActionMethod("media_003_video", "CheckState", null, 50, { pid: argobj.pid });
							}
							catch(e)
							{}
							return true;
						}
					}
				}
				return true;
			}]]>
			</body>
		</method>
		<method name="CheckState" label="CheckState" access="private">
			<params></params>
			<body>
				<![CDATA[function CheckState(argobj)
			{
				if(argobj.pid==null) return false; 
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				if(g_aParams[argobj.pid]==null) return false;
				var sPlayerType = oCurObj.getAttribute("playertype");
				var sPlayerID = oCurObj.getAttribute("playerid");
				if(sPlayerID==null || sPlayerType==null) return false;
				var oPlayer = document.getElementById(sPlayerID);
				if(oPlayer==null) return false;
				switch(sPlayerType)
				{
					case "qtp":
					{
						var iPrevState = oCurObj.getAttribute("prevstate");
						if(iPrevState==null || iPrevState=="") iPrevState = 0;
						iPrevState = parseInt(iPrevState, 10);
						try
						{
							var nState = oPlayer.GetRate(); // 0 - paused, 1 - playing normal speed
							var iDuration = oPlayer.GetDuration();
							var iTime = oPlayer.GetTime();
							var iScale = oPlayer.GetTimeScale();
							var iState = (nState>0) ? 3 : 2;
							if(iState==3)
							{
								var iPosition = parseInt(iTime/iScale);
								var iPrevPosition = parseInt(oCurObj.getAttribute("playpos"), 10);
								if(iPosition!=iPrevPosition)
								{
									oCurObj.setAttribute("playpos", iPosition.toString());
									FireEvent(argobj.pid, "onTickTimer");
									if(oCurObj==null) return false;
								}
							}
							if(g_isMSIE)
							{
								if(iState!=iPrevState)
								{
									FireEvent(argobj.pid, "onChangePlayState");
									if(oCurObj==null) return false;
									if(iState==3)
									{
										FireEvent(argobj.pid, "onPlayStart");
										if(oCurObj==null) return false;
										if(iPrevState==2)
										{
											FireEvent(argobj.pid, "onPlayResume");
										}
										else
										{
											if(iTime==0) FireEvent(argobj.pid, "onPlayBegin");
										}
										if(oCurObj==null) return false;
									}
									else
									{
										if(iPrevState==3)
										{
											if(iTime>=iDuration)
											{
												FireEvent(argobj.pid, "onMediaEnded");
												if(oCurObj==null) return false;
												FireEvent(argobj.pid, "onPlayStop");
												if(oCurObj==null) return false;
											}
											else
											{
												FireEvent(argobj.pid, "onPlayPause");
												if(oCurObj==null) return false;
											}
										}
									}
									oCurObj.setAttribute("prevstate", iState);
								}
							}
						}
						catch(e)
						{	
						}
						CreateTimeActionMethod("media_003_video", "CheckState", null, 50, { pid: argobj.pid });
						break;
					}
					case "wmp":
					{
						var iPrevState = oCurObj.getAttribute("prevstate");
						if(iPrevState==null || iPrevState=="") iPrevState = 0;
						iPrevState = parseInt(iPrevState, 10);
						var iState = 0;
						try { iState = oPlayer.playState; } catch(e) {}
						if(g_isMSIE)
						{
							if(iState==3)
							{
								try
								{
									var nPosition = oPlayer.controls.currentPosition;
									var iPosition = Math.floor(nPosition);
									var iPrevPosition = parseInt(oCurObj.getAttribute("playpos"), 10);
									if(iPosition!=iPrevPosition)
									{
										oCurObj.setAttribute("playpos", iPosition.toString());
										FireEvent(argobj.pid, "onTickTimer");
										if(oCurObj==null) return false;
									}
								}
								catch(e)
								{}
							}
						}
						else
						{
							var aEvents = ["Undefined", "onPlayStop", "onPlayPause", "onPlayStart", "onScanForward", "onScanBackward", "onStartBuffering", "onWaitServer", "onMediaEnded", "onStartPreparing" ,"onReadyToStart" ,"onStartReconnect"];
							if(iState==iPrevState)
							{
								if(iState==3)
								{
									oCurObj.setAttribute("playstate", "1");
									oCurObj.setAttribute("prevstate", 3);
									try
									{
										var nPosition = oPlayer.controls.currentPosition;
										var iPosition = Math.floor(nPosition);
										var iPrevPosition = parseInt(oCurObj.getAttribute("playpos"), 10);
										if(iPosition!=iPrevPosition)
										{
											oCurObj.setAttribute("playpos", iPosition.toString());
											FireEvent(argobj.pid, "onTickTimer");
											if(oCurObj==null) return false;
										}
									}
									catch(e)
									{}
								}
							}
							else
							{
								FireEvent(argobj.pid, "onChangePlayState");
								if(oCurObj==null) return false;
								FireEvent(argobj.pid, aEvents[iState]);
								if(oCurObj==null) return false;
								if(iState==3)
								{
									if(iPrevState==2)
									{
										FireEvent(argobj.pid, "onPlayResume");
									}
									else
									{
										FireEvent(argobj.pid, "onPlayBegin");
									}
									if(oCurObj==null) return false;
									oCurObj.setAttribute("playstate", "1");
									try
									{
										var nPosition = oPlayer.controls.currentPosition;
										var iPosition = Math.floor(nPosition);
										var iPrevPosition = parseInt(oCurObj.getAttribute("playpos"), 10);
										if(iPosition!=iPrevPosition)
										{
											oCurObj.setAttribute("playpos", iPosition.toString());
											FireEvent(argobj.pid, "onTickTimer");
											if(oCurObj==null) return false;
										}
									}
									catch(e)
									{}
									oCurObj.setAttribute("prevstate", 3);
								}
								else
								{
									if(iPrevState==3)
									{
										oCurObj.setAttribute("playstate", "0"); 
										if(iState==1)
										{
											try
											{
												var nPosition = oPlayer.controls.currentPosition;
												var nDuration = oPlayer.currentMedia.duration;
												var iPosition = Math.floor(nPosition);
												var iPrevPosition = parseInt(oCurObj.getAttribute("playpos"), 10);
												if(iPosition<iPrevPosition && (nDuration-iPrevPosition)<=1)
												{
													FireEvent(argobj.pid, "onMediaEnded");
													if(oCurObj==null) return false;
												}
											}
											catch(e)
											{}
										}
									}
									oCurObj.setAttribute("prevstate", iState);
								}
							}
						}
						CreateTimeActionMethod("media_003_video", "CheckState", null, 50, { pid: argobj.pid });
						break;
					}
				}
				return true;
			}]]>
			</body>
		</method>
		<method name="EventHandler" label="_EventHandler" access="private">
			<params>
			</params>
			<body>
				<![CDATA[function EventHandler(argobj)
			{
				if(argobj.pid==null || argobj.etype==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				switch(argobj.etype.toLowerCase())
				{
					case "mediachange":        FireEvent(argobj.pid,"onMediaChange"); return true;
					case "mediaerror":
					case "video_error":
					{
						FireEvent(argobj.pid,"onMediaError");
						return true;
					}
					case "positionchange":
					case "video_seek":
					{
						FireEvent(argobj.pid,"onPositionChange");
						return true;
					}
					case "playstatechange":
					{
						if(argobj.state==null) return false;
						var aEvents = ["Undefined", "onPlayStop", "onPlayPause", "onPlayStart", "onScanForward", "onScanBackward", "onStartBuffering", "onWaitServer", "onMediaEnded", "onStartPreparing" ,"onReadyToStart" ,"onStartReconnect"];
						var sPrevState = oCurObj.getAttribute("prevstate");
						if(sPrevState==null || sPrevState=="") sPrevState = "0";
						var iPrevState = parseInt(sPrevState, 10);
						var iState = parseInt(argobj.state, 10);
						if(isNaN(iState)) iState = 0;
						oCurObj.setAttribute("prevstate", iState.toString());
						FireEvent(argobj.pid, "onChangePlayState");
						if(oCurObj==null) return false;
						FireEvent(argobj.pid, aEvents[iState]);
						if(iState==3) FireEvent(argobj.pid, (iPrevState==2) ? "onPlayResume" : "onPlayBegin");
						break;
					}
					case "qt_ended":
					case "video_end":
					{
						FireEvent(argobj.pid, "onChangePlayState");
						if(oCurObj==null) return false;
						FireEvent(argobj.pid, "onMediaEnded");
						if(oCurObj==null) return false;
						FireEvent(argobj.pid, "onPlayStop");
						if(oCurObj==null) return false;
						oCurObj.setAttribute("prevstate", 1);
						break;
					}
					case "qt_play":
					case "video_play":
					{
						FireEvent(argobj.pid, "onChangePlayState");
						if(oCurObj==null) return false;
						FireEvent(argobj.pid, "onPlayStart");
						if(oCurObj==null) return false;
						oCurObj.setAttribute("prevstate", 3);
						break;
					}
					case "qt_pause":
					case "video_pause":
					{
						FireEvent(argobj.pid, "onChangePlayState");
						if(oCurObj==null) return false;
						FireEvent(argobj.pid, "onPlayPause");
						if(oCurObj==null) return false;
						oCurObj.setAttribute("prevstate", 2);
						break;
					}
					case "qt_load":
					case "video_load":
					{
						FireEvent(argobj.pid, "onReadyToStart");
						if(oCurObj==null) return false;
						oCurObj.setAttribute("prevstate", 10);
						break;
					}
					case "video_load":
					{
						FireEvent(argobj.pid, "onReadyToStart");
						if(oCurObj==null) return false;
						oCurObj.setAttribute("prevstate", 10);						
						break;
					}
					case "video_load":
					{
						FireEvent(argobj.pid, "onReadyToStart");
						if(oCurObj==null) return false;
						oCurObj.setAttribute("prevstate", 10);						
						break;
					}
				}
				return true;
			}]]>
			</body>
		</method>
		<method name="ReplaceMedia" label="REPLACE SOURCE" access="public">
			<params>
				<param name="URL" label="URL"/>
			</params>
			<body>
				<![CDATA[function ReplaceMedia(argobj)
			{
				if(argobj.pid==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				var sPlayerID = oCurObj.getAttribute("playerid");
				if(sPlayerID==null) return false;
				var oPlayer = document.getElementById(sPlayerID);
				if(oPlayer==null) return false;
				var sPlayerType = oCurObj.getAttribute("playertype");
				try
				{
					if(sPlayerType=="video")
					{
						oPlayer.src = argobj.URL;
					}
					else
					{
						oPlayer.URL = argobj.URL;
					}
				}
				catch(e)
				{}
				return true;
			}]]>
			</body>
		</method>
		<method name="SetProperty" label="SET PROPERTY" access="public">
			<params>
				<param name="property" label="Property" default="mute">
					<items>
						<item id="currentposition" label="Position"/>
						<item id="mute" label="Mute"/>
						<item id="volume" label="Volume"/>
					</items>
				</param>
				<param name="value" label="Value"/>
			</params>
			<body>
				<![CDATA[function SetProperty(argobj)
			{
				if(argobj.pid==null) return false;
				if(argobj.property==null || argobj.value==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				var sPlayerID = oCurObj.getAttribute("playerid");
				if(sPlayerID==null) return false;
				var oPlayer = document.getElementById(sPlayerID);
				if(oPlayer==null) return false;
				var sType = oCurObj.getAttribute("playertype");
				if(sType==null) return false;
				switch(sType)
				{
					case "video":
					{
						switch(argobj.property)
						{
							case "mute":
							{
								oPlayer.muted = (argobj.value.toString()=="1") ? true : false;
								break;
							}
							case "volume":
							{
								var iVolume = parseInt(argobj.value,10);
								if(isNaN(iVolume)) return false;
								if(iVolume<=0) iVolume = 0;
								if(iVolume>100) iVolume = 100;
								oPlayer.volume = iVolume/100;
								break;
							}
							case "currentposition":
							{
								var nPos = parseFloat(argobj.value);
								if(isNaN(nPos)) return false;
								var nDuration = oPlayer.duration;
								if(nPos>=nDuration) nPos = nDuration;
								if(nPos<=0) nPos = 0;
								oPlayer.currentTime = nPos;
								FireEvent(argobj.pid,"onPositionChange");
								break;
							}
						}						
						break;
					}
					case "qtp":
					{
						switch(argobj.property)
						{
							case "mute":
							{
								oPlayer.SetMute((argobj.value.toString()=="1") ? true : false);
								break;
							}
							case "volume":
							{
								var iVolume = parseInt(argobj.value,10);
								if(isNaN(iVolume)) return false;
								iVolume = Math.round(iVolume*2.55);
								if(iVolume<=0) iVolume = 0;
								if(iVolume>255) iVolume = 255;
								oPlayer.SetVolume(iVolume);
								break;
							}
							case "currentposition":
							{
								var iPos = parseFloat(argobj.value);
								if(isNaN(iPos)) return false;
								var iDuration = oPlayer.GetDuration();
								var iScale = oPlayer.GetTimeScale();
								iPos = Math.floor(iPos*iScale);
								if(iPos>=iDuration) iPos = iDuration;
								if(iPos<=0) iPos = 0;
								oPlayer.SetTime(iPos);
								FireEvent(argobj.pid,"onPositionChange");
								break;
							}
						}
						break;
					}
					case "wmp":
					{
						try
						{
							var oControls = oPlayer.controls;
							var oSettings = oPlayer.settings;
							switch(argobj.property)
							{
								case "mute":
								{
									if(oSettings.mute!=null) oSettings.mute = (argobj.value==1 || argobj.value=="1");
									break;
								}
								case "volume":
								{
									var iVolume = parseInt(argobj.value,10);
									if(isNaN(iVolume)) return false;
									if(iVolume<0) iVolume = 0;
									if(iVolume>100) iVolume = 100; 
									if(oSettings.volume!=null) oSettings.volume = iVolume.toString();	
									break;
								}
								case "currentposition":
								{
									var nCurPos = parseFloat(argobj.value);
									if(isNaN(nCurPos)) return false;
									oControls.currentPosition = nCurPos;
									break;
								}
							}
						}
						catch(e)
						{}
						break;
					}
				}
				return true;
			}]]>
			</body>
		</method>
		<method name="GetProperty" label="_GetProperty" access="private">
			<params>
			</params>
			<body>
				<![CDATA[function GetProperty(argobj)
			{
				if(argobj.pid==null || argobj.property==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				var sPlayerID = oCurObj.getAttribute("playerid");
				if(sPlayerID==null) return false;
				var oPlayer = document.getElementById(sPlayerID);
				if(oPlayer==null) return false;
				var sType = oCurObj.getAttribute("playertype");
				if(sType==null) return false;
				g_vPropertyValue = null;
				var aPlayStates = ["undefined", "stopped", "paused", "playing", "forward", "backward", "buffering", "waiting", "ended", "preparing", "ready", "reconnect"];
				switch(sType)
				{
					case "video":
					{
						try
						{
							switch(argobj.property.toLowerCase())
							{
								case "autostart":
								{
									var bAS = oPlayer.autoplay;
									g_vPropertyValue = bAS ? "1" : "0";
									break;
								}
								case "mute":
								{
									var bMute = oPlayer.muted;
									g_vPropertyValue = bMute ? "1" : "0";
									break;
								}
								case "volume":
								{
									g_vPropertyValue = Math.round(oPlayer.volume*100);
									break;
								}
								case "currentmedia":
								{
									g_vPropertyValue = oPlayer.src;
									break;
								}
								case "duration":
								{
									g_vPropertyValue = oPlayer.duration;
									break;
								}
								case "currentposition":
								{
									var sPos = oPlayer.currentTime;
									var nPos = parseFloat(sPos);
									var iPos = Math.floor(nPos);
									g_vPropertyValue = iPos.toString();
									break;
								}
								case "currentstate":
								{
									var sState = oCurObj.getAttribute("prevstate");
									if(sState==null) sState = 0;
									var iState = parseInt(sState, 10);
									if(isNaN(iState)) iState = 0;
									g_vPropertyValue = aPlayStates[iState];
									break;
								}
								case "url":
								{
									var sURL = oPlayer.src;
									var reSlash = new RegExp(/\//g);
									sURL = sURL.replace(reSlash,"\\/");
									g_vPropertyValue = sURL;
									break;
								}
							}
						}
						catch(e)
						{}						
						break;
					}
					case "qtp":
					{
						try
						{
							switch(argobj.property.toLowerCase())
							{
								case "autostart":
								{
									var bAS = oPlayer.GetAutoPlay();
									g_vPropertyValue = bAS ? "1" : "0";
									break;
								}
								case "mute":
								{
									var bMute = oPlayer.GetMute();
									g_vPropertyValue = bMute ? "1" : "0";
									break;
								}
								case "volume":
								{
									var iVolume = oPlayer.GetVolume();
									iVolume = Math.round(iVolume/255);
									g_vPropertyValue = iVolume;
									break;
								}
								case "currentmedia":
								{
									g_vPropertyValue = oPlayer.GetMovieName();
									break;
								}
								case "duration":
								{
									var iDuration = oPlayer.GetDuration();
									var iScale = oPlayer.GetTimeScale();
									g_vPropertyValue = Math.round(iDuration/iScale*10)/10;
									break;
								}
								case "currentposition":
								{
									var iTime = oPlayer.GetTime();
									var iScale = oPlayer.GetTimeScale();
									g_vPropertyValue = Math.round(iTime/iScale*10)/10;
									break;
								}
								case "currentstate":
								{
									var sState = oCurObj.getAttribute("prevstate");
									if(sState==null) sState = 0;
									var iState = parseInt(sState, 10);
									if(isNaN(iState)) iState = 0;
									g_vPropertyValue = aPlayStates[iState];
									break;
								}
								case "url":
								{
									var sURL = oPlayer.GetURL();
									var reSlash = new RegExp(/\//g);
									sURL = sURL.replace(reSlash,"\\/");
									g_vPropertyValue = sURL;
									break;
								}
							}
						}
						catch(e)
						{}
						break;
					}
					case "wmp":
					{
						try
						{
							var oControls = oPlayer.controls;
							var oMedia = oPlayer.currentMedia;
							var oSettings = oPlayer.settings;
							switch(argobj.property.toLowerCase())
							{
								case "autostart":
								{
									var bAS = oSettings.autoStart;
									g_vPropertyValue = bAS ? "1" : "0";
									break;
								}
								case "mute":
								{
									var bMute = oSettings.mute;
									g_vPropertyValue = bMute ? "1" : "0";
									break;
								}
								case "volume":
								{
									g_vPropertyValue = oSettings.volume;
									break;
								}
								case "currentmedia":
								{
									g_vPropertyValue = oMedia.name;
									break;
								}
								case "duration":
								{
									g_vPropertyValue = oMedia.duration;
									break;
								}
								case "currentposition":
								{
									var sPos = oControls.currentPosition;
									var nPos = parseFloat(sPos);
									var iPos = Math.floor(nPos);
									g_vPropertyValue = iPos.toString();
									break;
								}
								case "currentstate":
								{
									var sState = oPlayer.playState;
									if(sState==null) sState = 0;
									var iState = parseInt(sState, 10);
									if(isNaN(iState)) iState = 0;
									g_vPropertyValue = aPlayStates[iState];
									break;
								}
								case "isonline":
								{
									var bOnline = oPlayer.isOnline;
									g_vPropertyValue = bOnline ? "1" : "0";
									break;
								}
								case "url":
								{
									var sURL = oPlayer.URL;
									var reSlash = new RegExp(/\//g);
									sURL = sURL.replace(reSlash,"\\/");
									g_vPropertyValue = sURL;
									break;
								}
							}
						}
						catch(e)
						{}
						break;
					}
				}
				return true;
			}]]>
			</body>
		</method>
		<method name="PLAY" label="PLAY" access="public">
			<params>
			</params>
			<body>
				<![CDATA[function Play(argobj)
			{
				if(argobj.pid==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				var sPlayerID = oCurObj.getAttribute("playerid");
				if(sPlayerID==null) return false;
				var oPlayer = document.getElementById(sPlayerID);
				if(oPlayer==null) return false;
				var sType = oCurObj.getAttribute("playertype");
				if(sType==null) return false;
				try
				{
					switch(sType)
					{
						case "video":
						{
							if(oPlayer.readyState==4) oPlayer.play();
							break;
						}
						case "rp":
						{
							if(oPlayer.CanPlay()) oPlayer.DoPlay();
							break;
						}
						case "qtp":
						{
							oPlayer.play();
							break;
						}
						case "wmp":
						{
							oPlayer.controls.play();
							break;
						}
					}
				}
				catch(e)
				{}
				return true;
			}]]>
			</body>
		</method>
		<method name="STOP" label="STOP" access="public">
			<params>
			</params>
			<body>
				<![CDATA[function Stop(argobj)
			{
				if(argobj.pid==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				var sPlayerID = oCurObj.getAttribute("playerid");
				if(sPlayerID==null) return false;
				var oPlayer = document.getElementById(sPlayerID);
				if(oPlayer==null) return false;
				var sType = oCurObj.getAttribute("playertype");
				if(sType==null) return false;
				try
				{
					switch(sType)
					{
						case "video":
						{
							oPlayer.pause();
							oPlayer.currentTime = 0;
							oCurObj.setAttribute("state","stopped");
							break;
						}
						case "rp":
						{
							if(oPlayer.CanStop()) oPlayer.DoStop();
							break;
						}
						case "qtp":
						{
							oPlayer.stop();
							oPlayer.SetTime(0);
							oCurObj.setAttribute("state","stopped");
							break;
						}
						case "wmp":
						{
							oPlayer.controls.stop();
							break;
						}
					}
				}
				catch(e)
				{}
				return true;
			}]]>
			</body>
		</method>
		<method name="PAUSE" label="PAUSE" access="public">
			<params>
			</params>
			<body>
				<![CDATA[function Pause(argobj)
			{
				if(argobj.pid==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				var sPlayerID = oCurObj.getAttribute("playerid");
				if(sPlayerID==null) return false;
				var oPlayer = document.getElementById(sPlayerID);
				if(oPlayer==null) return false;
				var sType = oCurObj.getAttribute("playertype");
				if(sType==null) return false;
				try
				{
					switch(sType)
					{
						case "video":
						{
							oPlayer.pause();
							break;
						}
						case "rp":
						{
							if(oPlayer.CanPause()) oPlayer.DoPause();
							break;
						}
						case "qtp":
						{
							oPlayer.stop();
							break;
						}
						case "wmp":
						{
							oPlayer.controls.pause();
							break;
						}
					}
				}
				catch(e)
				{}
				return true;
			}]]>
			</body>
		</method>
		<method name="Destructor" label="_DESTRUCTOR" access="private">
			<params>
			</params>
			<body>
				<![CDATA[function Destructor(argobj)
			{
				if(argobj.pid==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				var sPlayerID = oCurObj.getAttribute("playerid");
				if(sPlayerID==null) return false;
				var oPlayer = document.getElementById(sPlayerID);
				if(oPlayer==null) return false;
				var sType = oCurObj.getAttribute("playertype");
				if(sType==null) return false;
				try
				{
					switch(sType)
					{
						case "rp":
						{
							if(oPlayer.CanStop()) oPlayer.DoStop();
							break;
						}
						case "video":
						case "qtp":
						{
							oPlayer.stop();
							break;
						}
						case "wmp":
						{
							oPlayer.controls.stop();
							break;
						}
					}
				}
				catch(e)
				{}
				return true;
			}]]>
			</body>
		</method>
	</methods>
</params>
