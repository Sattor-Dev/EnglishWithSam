<?xml version="1.0" encoding="utf-8"?>
<!--
'*	002_textbox.xml
-->
<params>
	<object>
		<label>Relief Text Box</label>
		<width>350</width>
		<height>200</height>
		<description>Relief Text Box with rounded corners</description>
	</object>
	<page name="Parameters" w="240" h="200">
		<param type="label" text="Text:" x="10" y="10" w="100" h="13"/>
		<param type="textedit" id="textbox_text" text="" def="Default text" x="110" y="9" w="103" h="13"/>
		<param type="label" text="Text margin:" x="10" y="26" w="100" h="13"/>
		<param type="edit" id="textbox_margin" text="" def="6" x="110" y="25" w="18" h="13"/>
		<param type="label" text="px" x="132" y="26" w="60" h="13"/>
		<param type="label" text="Scroll style:" x="10" y="42" w="100" h="13"/>
		<param type="select" id="overflow" text="" def="auto" x="110" y="41" w="120" h="13">
			<items>
				<item id="hidden" label="Hidden"/>
				<item id="auto" label="Auto scroll"/>
				<item id="scroll-y" label="Vertical scroll"/>
				<item id="scroll-x" label="Horizontal scroll"/>
				<item id="scroll" label="Full scroll"/>
				<item id="fit" label="Fit to width"/>
			</items>
		</param>
		<param type="label" text="Border color:" x="10" y="58" w="100" h="13"/>
		<param type="select" id="textbox_profile" text="" def="blue" x="110" y="57" w="120" h="13">
			<items>
				<item id="blue" label="Blue">
					<events>
						<event name="selendok" target="lab_fill_color_custom" action="disable"/>
						<event name="selendok" target="fill_color_custom" action="disable"/>
					</events>
				</item>
				<item id="grey" label="Grey">
					<events>
						<event name="selendok" target="lab_fill_color_custom" action="disable"/>
						<event name="selendok" target="fill_color_custom" action="disable"/>
					</events>
				</item>
				<item id="green" label="Green">
					<events>
						<event name="selendok" target="lab_fill_color_custom" action="disable"/>
						<event name="selendok" target="fill_color_custom" action="disable"/>
					</events>
				</item>
				<item id="red" label="Red">
					<events>
						<event name="selendok" target="lab_fill_color_custom" action="disable"/>
						<event name="selendok" target="fill_color_custom" action="disable"/>
					</events>
				</item>
				<item id="pink" label="Pink">
					<events>
						<event name="selendok" target="lab_fill_color_custom" action="disable"/>
						<event name="selendok" target="fill_color_custom" action="disable"/>
					</events>
				</item>
				<item id="yellow" label="Yellow">
					<events>
						<event name="selendok" target="lab_fill_color_custom" action="disable"/>
						<event name="selendok" target="fill_color_custom" action="disable"/>
					</events>
				</item>
				<item id="violet" label="Violet">
					<events>
						<event name="selendok" target="lab_fill_color_custom" action="disable"/>
						<event name="selendok" target="fill_color_custom" action="disable"/>
					</events>
				</item>
				<item id="orange" label="Orange">
					<events>
						<event name="selendok" target="lab_fill_color_custom" action="disable"/>
						<event name="selendok" target="fill_color_custom" action="disable"/>
					</events>
				</item>
				<item id="brown" label="Brown">
					<events>
						<event name="selendok" target="lab_fill_color_custom" action="disable"/>
						<event name="selendok" target="fill_color_custom" action="disable"/>
					</events>
				</item>
				<item id="custom" label="Custom">
					<events>
						<event name="selend" target="lab_fill_color_custom" action="disable"/>
						<event name="selend" target="fill_color_custom" action="disable"/>
						<event name="selendok" target="lab_fill_color_custom" action="enable"/>
						<event name="selendok" target="fill_color_custom" action="enable"/>
					</events>
				</item>
			</items>
		</param>
		<param type="label" id="lab_fill_color_custom" text="Custom color:" def="" x="10" y="74" w="100" h="13"/>
		<param type="color" id="fill_color_custom" text="" def="#6080b0" x="110" y="73" w="48" h="13"/>
		<param type="label" id="lab_bg_color_custom" text="Fill color:" def="" x="10" y="90" w="100" h="13"/>
		<param type="color" id="bg_color_custom" text="" def="#FFFFFF" x="110" y="89" w="48" h="13"/>
		<param type="check" id="onclick_hide" text="Close box on mouse click" def="no" x="10" y="106" w="155" h="13"/>
		<param type="check" id="shadow" text="Display shadow" def="no" x="10" y="122" w="180" h="13">
			<events>
				<event name="check" target="lab_shadow_strength" action="enable"/>
				<event name="check" target="shadow_strength" action="enable"/>
				<event name="uncheck" target="lab_shadow_strength" action="disable"/>
				<event name="uncheck" target="shadow_strength" action="disable"/>
			</events>
		</param>
		<param type="label" id="lab_shadow_strength" text="Shadow strength:" def="" x="10" y="138" w="100" h="13"/>
		<param type="select" id="shadow_strength" text="" def="normal" x="110" y="137" w="120" h="13">
			<items>
				<item id="extralight" label="Lightest"/>
				<item id="light" label="Light"/>
				<item id="normal" label="Normal"/>
				<item id="dark" label="Dark"/>
				<item id="extradark" label="Darkest"/>
			</items>
		</param>
	</page>
	<page name="Effects" w="240" h="200">
		<param type="check" id="typewriter" text="Typewriter effect" def="no" x="10" y="9" w="220" h="13">
			<events>
				<event name="check" target="typewriter_speed" action="show"/>
				<event name="check" target="box_sh_label12" action="show"/>
				<event name="check" target="box_sh_label13" action="show"/>
				<event name="uncheck" target="typewriter_speed" action="hide"/>
				<event name="uncheck" target="box_sh_label12" action="hide"/>
				<event name="uncheck" target="box_sh_label13" action="hide"/>
			</events>
		</param>
		<param type="line" x="10" y="23" w="220" h="1"/>
		<param type="label" id="box_sh_label12" text="Typewriter speed" x="10" y="29" w="110" h="13"/>
		<param type="edit" id="typewriter_speed" text="" def="8" x="120" y="28" w="24" h="13"/>
		<param type="label" id="box_sh_label13" text="char/sec" x="148" y="29" w="70" h="13"/>
	</page>
	<methods>
		<method name="Constructor" label="_Constructor" access="private">
			<params>
			</params>
			<body>
				<![CDATA[function Constructor(argobj)
			{
				if(argobj.pid==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				var oParams = g_oParams.selectSingleNode("./param[@objectid='" + argobj.pid + "']");
				if(oParams==null) return false;
				var oW3CDiv = document.getElementById(argobj.pid + "_w3c_div");
				var oVMLDiv = document.getElementById(argobj.pid + "_vml_div");
				if(oW3CDiv==null || oVMLDiv==null) return false;
				if(g_isMSIE)
				{
					oW3CDiv.style.display = "none";
					oW3CDiv.innerHTML = ".";
				}
				else
				{
					oVMLDiv.style.display = "none";
					oVMLDiv.innerHTML = ".";
				}
				var oObject = g_oSlides.selectSingleNode("//object[@id='" + argobj.pid + "']");
				var sScroll = oParams.selectSingleNode("overflow").text;
				if(!argobj.refresh)
				{
					oCurObj.setAttribute("ow", oObject.getAttribute("w"));
					oCurObj.setAttribute("oh", oObject.getAttribute("h"));
				}
				oCurObj.setAttribute("ready", "0");
				var bTW = (oParams.selectSingleNode("typewriter").text=="yes");
				var oTxt = document.getElementById(argobj.pid+"_txt");
				var sStr = oParams.selectSingleNode("textbox_text").text;
				var sRes = ReplaceMacrosInStr(sStr);
				oTxt.innerHTML = sRes;
				var aPs = oTxt.getElementsByTagName("p");
				if(aPs[0]!=null) aPs[aPs.length-1].style.marginBottom = "0px";
				if(sScroll=="scroll-y" || sScroll=="scroll-x")
				{
					if(g_isMSIE)
					{
						oTxt.style.overflow = "";
						oTxt.style.overflowX = (sScroll=="scroll-y") ? "hidden" : "scroll";
						oTxt.style.overflowY = (sScroll=="scroll-y") ? "scroll" : "hidden";
					}
					else
					{
						if(g_isOpera) oTxt.style.overflow = "auto";
					}
				}

				if(!bTW || argobj.refresh)
				{
					oCurObj.setAttribute("ready", "1");
					return false;
				}
				var oSpeed = oParams.selectSingleNode("typewriter_speed");
				if(oSpeed==null)
				{
					oCurObj.setAttribute("ready", "1");
					return false;
				}
				var iSpeed = parseInt(oSpeed.text, 10);
				if(isNaN(iSpeed)) iSpeed = 8;
				iSpeed = Math.round(1000/iSpeed);
				oCurObj.setAttribute("speed", iSpeed.toString());
				var sTxtOrig = Trim(oTxt.innerHTML);
				var aChunks0 = sTxtOrig.split(">");
				var aChunks1;
				var bEntity = false;
				var sChar;
				var iCnt = 0;
				var sNewStr = "";
				for(var i=0; i<aChunks0.length; i++)
				{
					aChunks1 = aChunks0[i].split("<");
					for(var j=0; j<aChunks1.length; j+=2)
					{
						bEntity = false;
						sNewStr = "";
						for(var k=0; k<aChunks1[j].length; k++)
						{
							sChar = aChunks1[j].charAt(k);
							if(bEntity)
							{
								sNewStr += sChar;
								if(sChar==";") bEntity = false;
								continue;
							}
							else
							{
								if(sChar=="&")
								{
									bSemicolon = false;
									for(var m=k+1; m<k+10; m++)
									{
										if(aChunks1[j].charAt(m)==null) break;
										if(aChunks1[j].charAt(m)==";")
										{
											bSemicolon = true;
											break;
										}
									}
									if(bSemicolon)
									{
										sNewStr += sChar;
										bEntity = true;
									}
									else
									{
										sNewStr += "<span id='" + argobj.pid + "_i" + iCnt.toString() + "' style='visibility:hidden'>" + sChar + "</span>";
										iCnt++;
									}
									continue;
								}
								sNewStr += "<span id='" + argobj.pid + "_i" + iCnt.toString() + "' style='visibility:hidden'>" + sChar + "</span>";
								iCnt++;
							}
						}
						aChunks1[j] = sNewStr;
					}
					aChunks0[i] = aChunks1.join("<");
				}
				oTxt.innerHTML = aChunks0.join(">");
				oCurObj.setAttribute("cid", "0");
				oCurObj.setAttribute("lid", iCnt.toString());
				if(oObject==null)
				{
					oCurObj.setAttribute("ready", "1");
					return false;
				}
				var sDisplay = oObject.getAttribute("display");
				var sBegin = oObject.getAttribute("begin");
				var sTranIn = oObject.getAttribute("tranin"); 
				if(sDisplay=="none" || (sBegin!=null && sBegin!="0") || sTranIn!=null)
				{
					AddEvtHandler("EVENT_OBJECT_ONLOAD", "002_textbox", argobj.pid);
				}
				else
				{
					CallMethod("002_textbox", "TypeChar", argobj);
				}
				return true;
			}]]>
			</body>
		</method>
		<method name="HandleEvt" label="_HandleEvt" access="private">
			<params></params>
			<body>
				<![CDATA[function HandleEvt(oEvtHandler, oArg)
			{
				var argobj = { pid: oEvtHandler.sTargetId };
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				switch (oEvtHandler.sEvt)
				{
					case "EVENT_OBJECT_ONLOAD":
					{
						var oObject = g_oSlides.selectSingleNode("//object[@id='" + argobj.pid + "']");
						if(oObject==null) return false;
						var sTranIn = oObject.getAttribute("tranin");
						if(sTranIn==null)
						{
							CallMethod("002_textbox", "TypeChar", argobj);
						}
						else
						{
							var sDurIn = oObject.getAttribute("durin");
							if(sDurIn==null)
							{
								CallMethod("002_textbox", "TypeChar", argobj);
							}
							else
							{
								var iDurIn = parseInt(sDurIn, 10);
								if(isNaN(iDurIn))
								{
									CallMethod("002_textbox", "TypeChar", argobj);
								}
								else
								{
									CreateTimeActionMethod("002_textbox", "TypeChar", null, iDurIn*1000, argobj);
								}
							}
						}
						break;
					}
				}
				return true;
			}]]>
			</body>
		</method>
		<method name="TypeChar" label="_TypeChar" access="private">
			<params>
			</params>
			<body>
				<![CDATA[function TypeChar(argobj)
			{
				if(argobj.pid==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				var iCnt = parseInt(oCurObj.getAttribute("cid") ,10);
				if(isNaN(iCnt)) return false;
				var oSpan = document.getElementById(argobj.pid + "_i" + iCnt.toString());
				if(oSpan!=null) oSpan.style.visibility = "visible";
				iCnt++;
				if(document.getElementById(argobj.pid + "_i" + iCnt.toString())!=null)
				{
					var iDelay = parseInt(oCurObj.getAttribute("speed"), 10);
					oCurObj.setAttribute("cid", iCnt.toString());
					CreateTimeActionMethod("002_textbox", "TypeChar", null, iDelay, argobj);
				}
				else
				{
					oCurObj.setAttribute("ready", "1");
					FireEvent(argobj.pid,"onTypeWriterEnd");
				}
				return true;
			}]]>
			</body>
		</method>
		<method name="ResizeObject" label="RESIZE" access="public">
			<params>
				<param name="neww" label="New width"/>
				<param name="newh" label="New height"/>
				<param name="how" label="Resize type" default="instant">
					<items>
						<item id="instant" label="Instant"/>
						<item id="step" label="By step"/>
					</items>
				</param>
				<param name="num" label="Number of steps" default="10"/>
				<param name="delay" label="Delay on step (msec)" default="50"/>
			</params>
			<body>
				<![CDATA[function ResizeObject(argobj)
			{
				if(argobj.pid==null || argobj.newh==null || argobj.neww==null) return false;
				if(argobj.newh=="" || argobj.neww=="") return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;

				var sNewW = argobj.neww;
				sNewW = ReplaceMacrosInStr(sNewW);
				sNewW = eval(sNewW);
				var sNewH = argobj.newh;
				sNewH = ReplaceMacrosInStr(sNewH);
				sNewH = eval(sNewH);
				var iNewH = parseInt(sNewH,10);
				var iNewW = parseInt(sNewW,10);
				if(isNaN(iNewH) || isNaN(iNewW)) return false;
				if(iNewW<=0 || iNewH<=0) return false;
				var iCurW = parseInt(oCurObj.getAttribute("ow"), 10);
				var iCurH = parseInt(oCurObj.getAttribute("oh"), 10); 
				if(iNewW==iCurW && iNewH==iCurH) return false;
				argobj.finalw = iNewW;
				argobj.finalh = iNewH;
				CallMethod("002_textbox", "DoResize", argobj );
				return true;
			}]]>
			</body>
		</method>
		<method name="DoResize" label="_DoResize" access="private">
			<params>
			</params>
			<body>
				<![CDATA[function DoResize(argobj)
			{ 
				if(argobj.pid==null || argobj.finalw==null || argobj.finalh==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				var oParams = g_oParams.selectSingleNode("./param[@objectid='" + argobj.pid + "']");
				if(oParams==null) return false;
				var sPadding = oParams.selectSingleNode("textbox_margin").text;
				var iPadding = parseInt(sPadding, 10);
				if(isNaN(iPadding)) iPadding = 6;
				var oTxt = document.getElementById(argobj.pid + "_txt");
				var oCover = document.getElementById(argobj.pid + "_cover");
				var aShapes = [];
				aShapes[0] = document.getElementById((g_isMSIE) ? argobj.pid + "_vml_shape_0" : argobj.pid + "_w3c_0");
				aShapes[1] = document.getElementById((g_isMSIE) ? argobj.pid + "_vml_shape_1" : argobj.pid + "_w3c_1");
				aShapes[2] = document.getElementById((g_isMSIE) ? argobj.pid + "_vml_shape_2" : argobj.pid + "_w3c_2");
				aShapes[3] = document.getElementById((g_isMSIE) ? argobj.pid + "_vml_shape_3" : argobj.pid + "_w3c_3");
				aShapes[4] = document.getElementById((g_isMSIE) ? argobj.pid + "_vml_shape_4" : argobj.pid + "_w3c_4");
				if(oTxt==null || aShapes[0]==null || aShapes[1]==null || aShapes[2]==null || aShapes[3]==null || aShapes[4]==null) return false;
				var iW = oCurObj.offsetWidth;
				var iH = oCurObj.offsetHeight;
				var iTargetW;
				var iTargetH;
				if(argobj.how=="instant")
				{
					iTargetW = argobj.finalw;
					iTargetH = argobj.finalh;
				}
				else
				{
					if(argobj.step==null)
					{
						argobj.step = 1;
						var iStepNum = 10;
						if(argobj.num!=null)
						{
							iStepNum = parseInt(argobj.num, 10);
							if(isNaN(iStepNum) || iStepNum<=0) iStepNum = 10;
						}
						argobj.stepqty = iStepNum;
						argobj.stepx = Math.floor((argobj.finalw - iW)/iStepNum);
						argobj.stepy = Math.floor((argobj.finalh - iH)/iStepNum);
						var iDelay = parseInt(argobj.delay, 10);
						if(isNaN(iDelay)) iDelay = 50;
						argobj.delay = iDelay;
					}
					else
					{
						argobj.step++;
						if(argobj.step>argobj.stepqty)
						{
							FireEvent(argobj.pid, "onResizeObject");
							return false;
						}
					}
					iTargetW = argobj.finalw - (argobj.stepqty - argobj.step)*argobj.stepx;
					iTargetH = argobj.finalh - (argobj.stepqty - argobj.step)*argobj.stepy;
				}
				oCurObj.style.width = iTargetW + "px";
				oCurObj.style.height = iTargetH + "px";
				oCurObj.setAttribute("ow", iW);
				oCurObj.setAttribute("oh", iH);
				iW = iTargetW - 2;
				iH = iTargetH - 2;
				if(iW<=(2*iPadding + 26) || iH<=(2*iPadding + 26))
				{
					FireEvent(argobj.pid, "onResizeObject");
					return false;
				}
				if(oCover!=null)
				{
					oCover.style.width = iW + "px";
					oCover.style.height = iH + "px";
					oCover.style.fontSize = (iH>iW) ? iH + "px" : iW + "px";
				}
				if(g_isMSIE)
				{
					var nYUnit;
					var nXUnit;
					var iR;
					var iX0 = "0";
					var iX1;
					var iX2;
					var iX3 = "1000";
					var iY0 = "0";
					var iY1;
					var iY2;
					var iY3 = "1000";
					var sPath;
					for(var i=0; i<=4; i++)
					{
						iR = 13 - i;
						nXUnit = 1000/iW;
						nYUnit = 1000/iH;
						iX1 = Math.round(iR*nXUnit);
						iX2 = 1000 - iX1;
						iY1 = Math.round(iR*nYUnit);
						iY2 = 1000 - iY1;
						sPath = "M" + iX0 + "," + iY1 + " QY" +  iX1 + "," + iY0 + " L" + iX2 + "," + iY0 + " QX" + iX3 + "," + iY1 + " L" + iX3 + "," + iY2 + " QY" + iX2 + "," + iY3 + " L" + iX1 + "," + iY3 + " QX" + iX0 + "," + iY2 + " XE";
						aShapes[i].style.width = iW + "px";
						aShapes[i].style.height = iH + "px";
						aShapes[i].path = sPath;
						iW -= 2;
						iH -= 2;
					}
					iW = iW - 2*iPadding - 16;
					iH = iH - 2*iPadding - 16;
				}
				else
				{
					aShapes[0].style.width = iW + "px";
					aShapes[0].style.height = iH + "px";
					iW -= 2;
					iH -= 2;
					aShapes[1].style.width = iW + "px";
					aShapes[1].style.height = iH + "px";
					iW -= 2;
					iH -= 2;
					aShapes[2].style.width = iW + "px";
					aShapes[2].style.height = iH + "px";
					iW -= 2;
					iH -= 2;
					aShapes[3].style.width = iW + "px";
					aShapes[3].style.height = iH + "px";
					iW -= 2;
					iH -= 2;
					aShapes[4].style.width = iW + "px";
					aShapes[4].style.height = iH + "px";
					iW = iW - 2*iPadding - 18;
					iH = iH - 2*iPadding - 18;
				}
				oTxt.style.width = iW + "px";
				oTxt.style.height = iH + "px";
				if(argobj.how!="instant")
				{
					if(argobj.step!=argobj.stepqty)
					{
						CreateTimeActionMethod("003_textbox", "DoResize", null, argobj.delay, argobj);
						return true;
					}
				}
				FireEvent(argobj.pid, "onResizeObject");
				return true;
			}]]>
			</body>
		</method>
		<method name="Close" label="CLOSE" access="public">
			<params>
			</params>
			<body>
				<![CDATA[function Close(argobj)
			{
				if(argobj.pid==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				CloseObject(argobj.pid);
				FireEvent(argobj.pid,"onCloseObject");
				return true;
			}]]>
			</body>
		</method>
		<method name="RefreshText" label="REFRESH" access="public">
			<params>
			</params>
			<body>
				<![CDATA[function RefreshText(argobj)
			{
				if(argobj.pid==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				if(oCurObj.getAttribute("ready")=="0") return false;
				var oParams = g_oParams.selectSingleNode("./param[@objectid='" + argobj.pid + "']");
				if(oParams==null) return false;
				argobj.refresh = true;
				CallMethod("002_textbox", "Constructor", argobj);
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				FireEvent(argobj.pid, "onRefresh");
				return true;
			}]]>
			</body>
		</method>
		<method name="AddText" label="ADD TEXT" access="public">
			<params>
				<param name="where" label="Where to add" default="end">
					<items>
						<item id="end" label="At the end"/>
						<item id="start" label="At the start"/>
					</items>
				</param>
				<param name="how" label="Adding style" default="space">
					<items>
						<item id="break" label="One line break"/>
						<item id="space" label="One space"/>
						<item id="p" label="One paragraph"/>
					</items>
				</param>
				<param name="value" label="Text to add"/>
			</params>
			<body>
				<![CDATA[function AddText(argobj)
			{
				if(argobj.pid==null) return false;
				var oCurObj = document.getElementById(argobj.pid);
				if(oCurObj==null) return false;
				if(oCurObj.getAttribute("ready")=="0") return false;
				var oTxt = document.getElementById(argobj.pid + "_txt");
				if(oTxt==null) return false;
				var sText = oTxt.innerHTML;
				var sValue = argobj.value;
				sValue = ReplaceMacrosInStr(sValue);
				if(argobj.how=="p")
				{
					var aPs = oTxt.getElementsByTagName("p");
					if(aPs[0]==null) argobj.how = "break";
				}
				var iLeft = 0;
				var iRight = 0;
				switch(argobj.how)
				{
					case "break":
					case "space":
					{
						var sDivider = (argobj.how=="space") ? " " : "<br/>";
						var sBuffer = sText;
						iRight = sBuffer.length;
						if(argobj.where=="start")
						{
							while(sBuffer.charAt(0)=="<")
							{
								iLeft += sBuffer.indexOf(">") + 1;
								sBuffer = sBuffer.substr(iLeft);
								if(sBuffer.length==0) return false;
							}
							var sLeft = sText.substring(0, iLeft);
							var sRight = sText.substr(iLeft);
							oTxt.innerHTML = sLeft + sValue + sDivider + sRight;
						}
						else
						{
							while(sBuffer.charAt(sBuffer.length-1)==">")
							{
								iRight = sBuffer.lastIndexOf("<");
								sBuffer = sBuffer.substring(0, iRight);
								if(sBuffer.length==0) return false;
							}
							var sLeft = sText.substring(0, iRight);
							var sRight = sText.substr(iRight);
							oTxt.innerHTML = sLeft + sDivider + sValue + sRight;
						}
						break;
					}
					case "p":
					{
						var oP = (argobj.where=="end") ? aPs[aPs.length-1] : aPs[0];
						var oNewP = oP.cloneNode(true); 
						if(argobj.where=="end")
						{
							oTxt.appendChild(oNewP);
							oP.style.marginBottom = "";
						}
						else
						{
							oTxt.insertBefore(oNewP, oP);
							oNewP.style.marginBottom = "";
						}
						var oChild = oNewP.firstChild; 
						if(oChild.nodeType!=3)
						{
							var iCnt = 0;
							do
							{
								oChild = oChild.firstChild;
								iCnt++;
								if(iCnt>20) return false;
							}
							while(oChild!=null && oChild.nodeType!=3)
						}
						var oParent = oChild.parentNode;
						while(oParent.nextSibling!=null)
						{
							oParent.parentNode.removeChild(oParent.nextSibling);
						}
						oParent.innerHTML = sValue;
						break;
					}
				}
				FireEvent(argobj.pid,"onAddText");
				return true;
			}]]>
			</body>
		</method>
	</methods>
</params>
